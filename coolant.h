#pragma once
#include <SFML/Graphics.hpp>
#include <string>
#include <iostream>
#include "idraggable.h"
#include "hackerWindow.h"
#include "renderSystem.hpp"
#include "complication.hpp"

/*****************************************************
 * Coolant:                                          *
 *      -A item used to slow down Firewalls.         *
 *       Generated by the cooler, cools down a       *
 *       Firewall that it is dragged onto.           *
 *      -A derived class of IDraggable (and through  *
 *        it Drawable)                               *
 * Visual:                                           *
 *     -A "Cool" looking Ice Cube that follows the   *
 *      mouse.                                       *
 * ***************************************************/
class Coolant : public IDraggable {
    public:

        /* Takes a starting position for the sprite,
           A pointer to the HackerWindow that we want to drop the coolant on,
           And a reference to the texture to use as input. */
        Coolant(sf::Vector2f pos, sf::Texture& coolantTexture);
        ~Coolant();

        /* If the drag ends within the bounds of a HackerWindow with an active firewall,
           It applies the coolant to the firewall. 
           at the end of the below function the coolant destroys itself. */
        virtual void onDragEnd(sf::Vector2f position); 
        virtual void onDragMove(sf::Vector2f newPosition); // Updates the sprite position
        virtual sf::Vector2f getPosition(); // Getter method for the sprite's current position

        static void setFireWall(Complication::FireWall* pointer); // Called by the active Firewall to notify all Coolants which Firewall to cool down.

    private:
        static Complication::FireWall* fireWall; // A pointer to the active firewall, if any. Shared among Coolants
        sf::Sprite coolantSprite;
        virtual void draw(sf::RenderTarget& renderTarget, sf::RenderStates states) const;
};

Complication::FireWall* Coolant::fireWall = NULL; // Initializes the active firewall as a null pointer.